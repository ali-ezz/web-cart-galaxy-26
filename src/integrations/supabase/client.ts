
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lpabxfhmsiadplgqrpym.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxwYWJ4Zmhtc2lhZHBsZ3FycHltIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzMDUyMjcsImV4cCI6MjA2MTg4MTIyN30.jp94HEoU8kNFdg80aLfxUW0GD99QE12_NuqGrFcaf-k";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true, // Enable session detection in URL for SSO flows
    flowType: 'pkce' // Use PKCE flow for better OAuth security
  },
  global: {
    fetch: (url, options) => {
      // Custom fetch with timeout
      const fetchPromise = fetch(url, options);
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Connection timed out')), 15000); // 15 second timeout
      });
      return Promise.race([fetchPromise, timeoutPromise]) as Promise<Response>;
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    timeout: 10000 // 10 seconds
  }
});

// Add a connection health check function
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('profiles').select('id').limit(1).maybeSingle();
    return { success: !error, error };
  } catch (err) {
    return { success: false, error: err };
  }
};
